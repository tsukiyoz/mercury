// Code generated by MockGen. DO NOT EDIT.
// Source: ./interactive.go
//
// Generated by this command:
//
//	mockgen -source=./interactive.go -package=daomocks -destination=mocks/interactive.mock.go InteractiveDAO
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/tsukiyo/mercury/internal/interactive/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockInteractiveDAO is a mock of InteractiveDAO interface.
type MockInteractiveDAO struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveDAOMockRecorder
}

// MockInteractiveDAOMockRecorder is the mock recorder for MockInteractiveDAO.
type MockInteractiveDAOMockRecorder struct {
	mock *MockInteractiveDAO
}

// NewMockInteractiveDAO creates a new mock instance.
func NewMockInteractiveDAO(ctrl *gomock.Controller) *MockInteractiveDAO {
	mock := &MockInteractiveDAO{ctrl: ctrl}
	mock.recorder = &MockInteractiveDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveDAO) EXPECT() *MockInteractiveDAOMockRecorder {
	return m.recorder
}

// BatchIncrReadCnt mocks base method.
func (m *MockInteractiveDAO) BatchIncrReadCnt(ctx context.Context, biz string, ids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIncrReadCnt", ctx, biz, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchIncrReadCnt indicates an expected call of BatchIncrReadCnt.
func (mr *MockInteractiveDAOMockRecorder) BatchIncrReadCnt(ctx, biz, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIncrReadCnt", reflect.TypeOf((*MockInteractiveDAO)(nil).BatchIncrReadCnt), ctx, biz, ids)
}

// DelFavoriteItem mocks base method.
func (m *MockInteractiveDAO) DelFavoriteItem(ctx context.Context, ci dao.FavoriteItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFavoriteItem", ctx, ci)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelFavoriteItem indicates an expected call of DelFavoriteItem.
func (mr *MockInteractiveDAOMockRecorder) DelFavoriteItem(ctx, ci any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFavoriteItem", reflect.TypeOf((*MockInteractiveDAO)(nil).DelFavoriteItem), ctx, ci)
}

// DeleteLikeInfo mocks base method.
func (m *MockInteractiveDAO) DeleteLikeInfo(ctx context.Context, biz string, bizId, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLikeInfo", ctx, biz, bizId, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLikeInfo indicates an expected call of DeleteLikeInfo.
func (mr *MockInteractiveDAOMockRecorder) DeleteLikeInfo(ctx, biz, bizId, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLikeInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).DeleteLikeInfo), ctx, biz, bizId, uid)
}

// Get mocks base method.
func (m *MockInteractiveDAO) Get(ctx context.Context, biz string, bizId int64) (dao.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, biz, bizId)
	ret0, _ := ret[0].(dao.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveDAOMockRecorder) Get(ctx, biz, bizId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveDAO)(nil).Get), ctx, biz, bizId)
}

// GetByIds mocks base method.
func (m *MockInteractiveDAO) GetByIds(ctx context.Context, biz string, ids []int64) ([]dao.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, biz, ids)
	ret0, _ := ret[0].([]dao.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockInteractiveDAOMockRecorder) GetByIds(ctx, biz, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockInteractiveDAO)(nil).GetByIds), ctx, biz, ids)
}

// GetFavoriteInfo mocks base method.
func (m *MockInteractiveDAO) GetFavoriteInfo(ctx context.Context, biz string, bizId, uid int64) (dao.FavoriteItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteInfo", ctx, biz, bizId, uid)
	ret0, _ := ret[0].(dao.FavoriteItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteInfo indicates an expected call of GetFavoriteInfo.
func (mr *MockInteractiveDAOMockRecorder) GetFavoriteInfo(ctx, biz, bizId, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).GetFavoriteInfo), ctx, biz, bizId, uid)
}

// GetLikeInfo mocks base method.
func (m *MockInteractiveDAO) GetLikeInfo(ctx context.Context, biz string, bizId, uid int64) (dao.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeInfo", ctx, biz, bizId, uid)
	ret0, _ := ret[0].(dao.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeInfo indicates an expected call of GetLikeInfo.
func (mr *MockInteractiveDAOMockRecorder) GetLikeInfo(ctx, biz, bizId, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).GetLikeInfo), ctx, biz, bizId, uid)
}

// IncrReadCnt mocks base method.
func (m *MockInteractiveDAO) IncrReadCnt(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCnt", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockInteractiveDAOMockRecorder) IncrReadCnt(ctx, biz, bizId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockInteractiveDAO)(nil).IncrReadCnt), ctx, biz, bizId)
}

// InsertFavoriteItem mocks base method.
func (m *MockInteractiveDAO) InsertFavoriteItem(ctx context.Context, ci dao.FavoriteItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFavoriteItem", ctx, ci)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFavoriteItem indicates an expected call of InsertFavoriteItem.
func (mr *MockInteractiveDAOMockRecorder) InsertFavoriteItem(ctx, ci any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFavoriteItem", reflect.TypeOf((*MockInteractiveDAO)(nil).InsertFavoriteItem), ctx, ci)
}

// InsertLikeInfo mocks base method.
func (m *MockInteractiveDAO) InsertLikeInfo(ctx context.Context, biz string, bizId, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLikeInfo", ctx, biz, bizId, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLikeInfo indicates an expected call of InsertLikeInfo.
func (mr *MockInteractiveDAOMockRecorder) InsertLikeInfo(ctx, biz, bizId, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLikeInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).InsertLikeInfo), ctx, biz, bizId, uid)
}
