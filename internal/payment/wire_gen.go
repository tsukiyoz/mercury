// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"

	"github.com/tsukiyo/mercury/internal/payment/grpc"
	"github.com/tsukiyo/mercury/internal/payment/ioc"
	"github.com/tsukiyo/mercury/internal/payment/repository"
	"github.com/tsukiyo/mercury/internal/payment/repository/dao"
	"github.com/tsukiyo/mercury/internal/payment/web"
	"github.com/tsukiyo/mercury/pkg/app"
)

// Injectors from wire.go:

func InitAPP() *app.App {
	wechatConfig := ioc.InitWechatConfig()
	handler := ioc.InitWechatNotifyHandler(wechatConfig)
	logger := ioc.InitLogger()
	client := ioc.InitWechatClient(wechatConfig)
	db := ioc.InitDB(logger)
	paymentDAO := dao.NewGORMPaymentDAO(db)
	paymentRepository := repository.NewPaymentRepository(paymentDAO)
	saramaClient := ioc.InitKafka()
	producer := ioc.InitProducer(saramaClient)
	nativePaymentService := ioc.InitWechatNativeService(client, paymentRepository, logger, producer, wechatConfig)
	wechatHandler := web.NewWechatHandler(handler, logger, nativePaymentService)
	server := ioc.InitWebServer(wechatHandler)
	wechatServiceServer := grpc.NewWechatPaymentServiceServer(nativePaymentService)
	grpcxServer := ioc.InitGRPCxServer(wechatServiceServer, logger)
	cmdable := ioc.InitRedis()
	rlockClient := ioc.InitRLockClient(cmdable)
	syncWechatOrderJob := ioc.InitSyncWechatPaymentJob(nativePaymentService, rlockClient, logger)
	cron := ioc.InitCronJobs(logger, syncWechatOrderJob)
	appApp := &app.App{
		WebServer:  server,
		GRPCServer: grpcxServer,
		Cron:       cron,
	}
	return appApp
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitDB, ioc.InitLogger, ioc.InitKafka, ioc.InitProducer, ioc.InitWechatNotifyHandler, ioc.InitWechatConfig, ioc.InitWechatClient, ioc.InitCronJobs, ioc.InitRedis, ioc.InitRLockClient)
