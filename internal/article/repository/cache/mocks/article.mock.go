// Code generated by MockGen. DO NOT EDIT.
// Source: ./article.go
//
// Generated by this command:
//
//	mockgen -source=./article.go -package=cachemocks -destination=mocks/article.mock.go ArticleCache
//

// Package cachemocks is a generated GoMock package.
package cachemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/tsukiyo/mercury/internal/article/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleCache is a mock of ArticleCache interface.
type MockArticleCache struct {
	ctrl     *gomock.Controller
	recorder *MockArticleCacheMockRecorder
}

// MockArticleCacheMockRecorder is the mock recorder for MockArticleCache.
type MockArticleCacheMockRecorder struct {
	mock *MockArticleCache
}

// NewMockArticleCache creates a new mock instance.
func NewMockArticleCache(ctrl *gomock.Controller) *MockArticleCache {
	mock := &MockArticleCache{ctrl: ctrl}
	mock.recorder = &MockArticleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleCache) EXPECT() *MockArticleCacheMockRecorder {
	return m.recorder
}

// DelFirstPage mocks base method.
func (m *MockArticleCache) DelFirstPage(ctx context.Context, authorId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFirstPage", ctx, authorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelFirstPage indicates an expected call of DelFirstPage.
func (mr *MockArticleCacheMockRecorder) DelFirstPage(ctx, authorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFirstPage", reflect.TypeOf((*MockArticleCache)(nil).DelFirstPage), ctx, authorId)
}

// Get mocks base method.
func (m *MockArticleCache) Get(ctx context.Context, id int64) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArticleCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticleCache)(nil).Get), ctx, id)
}

// GetFirstPage mocks base method.
func (m *MockArticleCache) GetFirstPage(ctx context.Context, authorId int64) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstPage", ctx, authorId)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstPage indicates an expected call of GetFirstPage.
func (mr *MockArticleCacheMockRecorder) GetFirstPage(ctx, authorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstPage", reflect.TypeOf((*MockArticleCache)(nil).GetFirstPage), ctx, authorId)
}

// GetPub mocks base method.
func (m *MockArticleCache) GetPub(ctx context.Context, id int64) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPub", ctx, id)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPub indicates an expected call of GetPub.
func (mr *MockArticleCacheMockRecorder) GetPub(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPub", reflect.TypeOf((*MockArticleCache)(nil).GetPub), ctx, id)
}

// Set mocks base method.
func (m *MockArticleCache) Set(ctx context.Context, atcl domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, atcl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockArticleCacheMockRecorder) Set(ctx, atcl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockArticleCache)(nil).Set), ctx, atcl)
}

// SetFirstPage mocks base method.
func (m *MockArticleCache) SetFirstPage(ctx context.Context, authorId int64, atcls []domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstPage", ctx, authorId, atcls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstPage indicates an expected call of SetFirstPage.
func (mr *MockArticleCacheMockRecorder) SetFirstPage(ctx, authorId, atcls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstPage", reflect.TypeOf((*MockArticleCache)(nil).SetFirstPage), ctx, authorId, atcls)
}

// SetPub mocks base method.
func (m *MockArticleCache) SetPub(ctx context.Context, atcl domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPub", ctx, atcl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPub indicates an expected call of SetPub.
func (mr *MockArticleCacheMockRecorder) SetPub(ctx, atcl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPub", reflect.TypeOf((*MockArticleCache)(nil).SetPub), ctx, atcl)
}
